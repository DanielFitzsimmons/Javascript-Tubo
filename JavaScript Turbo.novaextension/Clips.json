{
  "clips": [
    {
      "content": "$AUTHOR_NAME",
      "name": "User Signature",
      "trigger": "usersig"
    },
    {
      "children": [
        {
          "content": "var $0",
          "name": "var",
          "scope": "editor",
          "syntax": "javascript",
          "trigger": "var"
        },
        {
          "content": "var $0 = ${:value}",
          "name": "var name = value",
          "scope": "editor",
          "syntax": "javascript",
          "trigger": "var"
        },
        {
          "content": "let $0",
          "name": "let",
          "scope": "editor",
          "syntax": "javascript",
          "trigger": "let"
        },
        {
          "content": "let $0 = ${:value}",
          "name": "let name = value",
          "scope": "editor",
          "syntax": "javascript",
          "trigger": "let"
        },
        {
          "content": "const $0",
          "name": "const",
          "scope": "editor",
          "syntax": "javascript",
          "trigger": "const"
        },
        {
          "content": "const $0 = ${:value}",
          "name": "const name = value",
          "scope": "editor",
          "syntax": "javascript",
          "trigger": "const"
        }
      ],
      "name": "Declarations"
    },
    {
      "children": [
        {
          "content": "if (${1:condition}) {\n\t$0\n}",
          "name": "if",
          "scope": "editor",
          "syntax": "javascript",
          "trigger": "if"
        },
        {
          "content": "else {\n  $0\n}",
          "name": "else",
          "scope": "editor",
          "syntax": "javascript",
          "trigger": "el"
        },
        {
          "content": "if (${1:condition}) {\n\t$0\n} else {\n\t\n}",
          "name": "if else",
          "scope": "editor",
          "syntax": "javascript",
          "trigger": "ife"
        },
        {
          "content": "else if (${1:condition}) {\n\t$0\n}",
          "name": "else if",
          "scope": "editor",
          "syntax": "javascript",
          "trigger": "ei"
        },
        {
          "content": "for (let ${1:i} = 0, ${2:len} = ${3:iterable}.length; ${1:i} < ${2:len}; ${1:i}++) {\n\t$0\n}",
          "name": "For Loop",
          "scope": "editor",
          "syntax": "javascript",
          "trigger": "fl"
        },
        {
          "content": "for (let ${1:key} in ${2:source}) {\n\tif (${2:source}.hasOwnProperty(${1:key})) {\n\t$0\n\t}\n}",
          "name": "for in loop",
          "scope": "editor",
          "syntax": "javascript",
          "trigger": "fi"
        },
        {
          "content": "for (let ${1:key} of ${2:source}) {\n\t$0\n}",
          "name": "for of loop",
          "scope": "editor",
          "syntax": "javascript",
          "trigger": "fo"
        },
        {
          "content": "while (${1:condition}) {\n\n\t$0\n}",
          "name": "wl",
          "scope": "editor",
          "syntax": "javascript",
          "trigger": "wl"
        },
        {
          "content": "try {\n\t$0\n} catch (${1:err}) {\n}",
          "name": "try/catch",
          "scope": "editor",
          "syntax": "javascript",
          "trigger": "tc"
        },
        {
          "content": "try {\n\t$0\n} catch (${1:err}) {\n}",
          "name": "try/finally",
          "scope": "editor",
          "syntax": "javascript",
          "trigger": "tf"
        },
        {
          "content": "try {\n\t$0\n} catch (${1:err}) {\n\t} finally {\n\t\n}",
          "name": "try/catch/finally",
          "scope": "editor",
          "syntax": "javascript",
          "trigger": "tcf"
        },
        {
          "content": "switch (${1:expr}) {\n\t case ${2:value} \n\t return $0;\n default:\n\t return;\n }",
          "name": "switch case",
          "scope": "editor",
          "syntax": "javascript",
          "trigger": "sw"
        }
      ],
      "name": "Flow Control"
    },
    {
      "children": [
        {
          "content": "function (${1:arguments}) {$0}",
          "name": "anonymous function",
          "scope": "editor",
          "syntax": "javascript",
          "trigger": "f"
        },
        {
          "content": "function ${1:name}(${2:arguments}) {\n\t$0\n }",
          "name": "named function",
          "scope": "editor",
          "syntax": "javascript",
          "trigger": "fn"
        },
        {
          "content": "async function ${1:name}(${2:arguments}) {\n  await $0\n}",
          "name": "async function",
          "trigger": "af"
        },
        {
          "content": "(function (${1:arguments}) {\n\t$0\n})($2);",
          "name": "immediately-invoked function expression (IIFE)",
          "scope": "editor",
          "syntax": "javascript",
          "trigger": "iife"
        },
        {
          "content": "${1:fn}.apply(${2:this}, ${3:arguments})",
          "name": "function apply",
          "scope": "editor",
          "syntax": "javascript",
          "trigger": "fa"
        },
        {
          "content": "${1:fn}.call(${2:this}, ${3:arguments})",
          "name": "function call",
          "scope": "editor",
          "syntax": "javascript",
          "trigger": "fc"
        },
        {
          "content": "${1:fn}.bind(${2:this}, ${3:arguments})",
          "name": "function bind",
          "scope": "editor",
          "syntax": "javascript",
          "trigger": "fb"
        },
        {
          "content": "(${1:arguments}) => ${2:statement}",
          "name": "arrow function (ES6)",
          "scope": "editor",
          "syntax": "javascript",
          "trigger": "af"
        },
        {
          "content": "(${1:arguments}) => {\t$0}",
          "name": "arrow function with body (ES6)",
          "scope": "editor",
          "syntax": "javascript",
          "trigger": "afb"
        },
        {
          "content": "function (${1:arguments}) {\n\t$0\n}",
          "name": "generator function (ES6)",
          "scope": "editor",
          "syntax": "javascript",
          "trigger": "afb"
        },
        {
          "content": "function ${1:name}(${1:arguments}) {\n\t$0\n}",
          "name": "named generator function (ES6)",
          "scope": "editor",
          "syntax": "javascript",
          "trigger": "gfn"
        }
      ],
      "name": "Functions"
    },
    {
      "children": [
        {
          "content": "[...Array(${1:length}).keys()]$0",
          "name": "sequence of 0..n",
          "scope": "editor",
          "syntax": "javascript",
          "trigger": "seq"
        },
        {
          "content": "${1:iterable}.forEach((${2:item}) => {\n\t$0/n});",
          "name": "forEach loop",
          "scope": "editor",
          "syntax": "javascript",
          "trigger": "fe"
        },
        {
          "content": "${1:iterable}.map((${2:item}) => {\n\t$0\n});",
          "name": "map function",
          "scope": "editor",
          "syntax": "javascript",
          "trigger": "map"
        },
        {
          "content": "${1:iterable}.reduce((${2:previous}, ${3:current}) => {\n\t$0\n}${4:, initial});",
          "name": "reduce function",
          "scope": "editor",
          "syntax": "javascript",
          "trigger": "reduce"
        },
        {
          "content": "${1:iterable}.find((${2:item}) => {\n\t$0\n});",
          "name": " ES6 find function",
          "scope": "editor",
          "syntax": "javascript",
          "trigger": "find"
        }
      ],
      "name": "Iterables"
    },
    {
      "children": [
        {
          "content": "class ${1:name} {\n\tconstructor(${2:arguments}) {\n\t$0\n\t}\n}",
          "name": "class (ES6)",
          "scope": "editor",
          "syntax": "javascript",
          "trigger": "c"
        },
        {
          "content": "class ${1:name} extends ${2:base} {\n\tconstructor(${2:arguments}) {\n\t\tsuper(${2:arguments});\n\t$0\n\t\t\t}\n}",
          "name": "child class (ES6)",
          "scope": "editor",
          "syntax": "javascript",
          "trigger": "cex"
        },
        {
          "content": "constructor(${1:arguments}) {\n\tsuper(${1:arguments});$0\n}",
          "name": "class constructor (ES6)",
          "scope": "editor",
          "syntax": "javascript",
          "trigger": "ctor"
        },
        {
          "content": "${1:key}: ${2:'value'}",
          "name": "key/value pair - JavaScript",
          "scope": "editor",
          "syntax": "javascript",
          "trigger": ":"
        },
        {
          "content": "'${1:key}': ${2:'value'}",
          "name": "key/value pair - JSON",
          "scope": "editor",
          "syntax": "javascript",
          "trigger": ":"
        },
        {
          "content": "${1:method}(${2:arguments}) {\n\t$0\n}",
          "name": "method (ES6 syntax)",
          "scope": "editor",
          "syntax": "javascript",
          "trigger": "m"
        },
        {
          "content": "get ${1:property}() {\n\t$0\n}",
          "name": "getter (ES6 syntax)",
          "scope": "editor",
          "syntax": "javascript",
          "trigger": "get"
        },
        {
          "content": "set ${1:property}(${2:value}) {\n\t$0\n}",
          "name": "setter (ES6 syntax)",
          "scope": "editor",
          "syntax": "javascript",
          "trigger": "set"
        },
        {
          "content": "get ${1:property}() {\n\t$0\n}\nset ${1:property}(${2:value}) {\n\n}",
          "name": "setter (ES6 syntax)",
          "scope": "editor",
          "syntax": "javascript",
          "trigger": "set"
        },
        {
          "content": "${1:Class}.prototype.${2:methodName} = function (${3:arguments}) {\n\t$0\n};",
          "name": "prototype method (chainable)",
          "scope": "editor",
          "syntax": "javascript",
          "trigger": "proto"
        },
        {
          "content": "Object.assign(${1:dest}, ${2:source})",
          "name": "Object assign",
          "scope": "editor",
          "syntax": "javascript",
          "trigger": "a"
        },
        {
          "content": "Object.assign({}, ${1:original}, ${2:source})",
          "name": "Object assign copy (shallow clone)",
          "scope": "editor",
          "syntax": "javascript",
          "trigger": "ac"
        }
      ],
      "name": "Objects and classes"
    },
    {
      "children": [
        {
          "content": "new Promise((resolve, reject) => {\n\t$0\n})",
          "name": "new Promise (ES6)",
          "scope": "editor",
          "syntax": "javascript",
          "trigger": "p"
        },
        {
          "content": "${1:promise}.then(${2:value} => {\n\t$0\n});",
          "name": "Promise.then",
          "scope": "editor",
          "syntax": "javascript",
          "trigger": "then"
        },
        {
          "content": "${1:promise}.catch(${2:err} => {\n\t$0\n});",
          "name": "Promise.catch",
          "scope": "editor",
          "syntax": "javascript",
          "trigger": "catch"
        }
      ],
      "name": "Promises"
    },
    {
      "children": [
        {
          "content": "export ${1:member};",
          "name": "module export",
          "scope": "editor",
          "syntax": "javascript",
          "trigger": "ex"
        },
        {
          "content": "export default ${1:member};",
          "name": "module default export",
          "scope": "editor",
          "syntax": "javascript",
          "trigger": "exd"
        },
        {
          "content": "import ${1:*} from '${2:module}';",
          "name": "module import",
          "scope": "editor",
          "syntax": "javascript",
          "trigger": "im"
        },
        {
          "content": "import ${1:*} as ${2:name} from '${3:module}';",
          "name": "module import as",
          "scope": "editor",
          "syntax": "javascript",
          "trigger": "ima"
        }
      ],
      "name": "ES6 modules"
    },
    {
      "children": [
        {
          "content": "describe('${1:description}', function () {\n\t$0\n});",
          "name": "describe",
          "scope": "editor",
          "syntax": "javascript",
          "trigger": "desc"
        },
        {
          "content": "context('${1:description}', function () {\n\t$0\n});",
          "name": "context",
          "scope": "editor",
          "syntax": "javascript",
          "trigger": "cont"
        },
        {
          "content": "it('${1:description}', function () {\n\t$0\n});",
          "name": "synchronous 'it'",
          "scope": "editor",
          "syntax": "javascript",
          "trigger": "its"
        },
        {
          "content": "it('${1:description}', function (done) {\n\t$0\n});",
          "name": "asynchronous 'it'",
          "scope": "editor",
          "syntax": "javascript",
          "trigger": "ita"
        },
        {
          "content": "before(function () {\n\t$0\n});",
          "name": "before test suite",
          "scope": "editor",
          "syntax": "javascript",
          "trigger": "bf"
        },
        {
          "content": "beforeEach(function () {\n\t$0\n});",
          "name": "before each test",
          "scope": "editor",
          "syntax": "javascript",
          "trigger": "bfe"
        },
        {
          "content": "after(function () {\n\t$0\n});",
          "name": "after test suite",
          "scope": "editor",
          "syntax": "javascript",
          "trigger": "aft"
        },
        {
          "content": "afterEach(function () {\n\t$0\n});",
          "name": "after each test",
          "scope": "editor",
          "syntax": "javascript",
          "trigger": "afe"
        }
      ],
      "name": "BDD testing (Mocha, Jasmine, etc.)"
    },
    {
      "children": [
        {
          "content": "console.log($0);",
          "name": "console.log",
          "scope": "editor",
          "syntax": "javascript",
          "trigger": "cl"
        },
        {
          "content": "console.warn($0);",
          "name": "console.warn",
          "scope": "editor",
          "syntax": "javascript",
          "trigger": "cw"
        },
        {
          "content": "console.error($0);",
          "name": "console.error",
          "scope": "editor",
          "syntax": "javascript",
          "trigger": "ce"
        }
      ],
      "name": "Console"
    },
    {
      "children": [
        {
          "content": "setTimeout(() => {\n\t$0\n}, ${1:delay});",
          "name": "setTimeout",
          "scope": "editor",
          "syntax": "javascript",
          "trigger": "st"
        },
        {
          "content": "setInterval(() => {\n\t$0\n}, ${1:delay});",
          "name": "setInterval",
          "scope": "editor",
          "syntax": "javascript",
          "trigger": "si"
        },
        {
          "content": "setImmediate(() => {\n\t$0\n});",
          "name": "setImmediate",
          "scope": "editor",
          "syntax": "javascript",
          "trigger": "sim"
        }
      ],
      "name": "Timers"
    },
    {
      "children": [
        {
          "content": "${1:document}.getElementById('${2:id}')",
          "name": "getElementById",
          "scope": "editor",
          "syntax": "javascript",
          "trigger": "gi"
        },
        {
          "content": "Array.from(${1:document}.getElementsByClassName('${2:class}'))",
          "name": "getElementsByClassName",
          "scope": "editor",
          "syntax": "javascript",
          "trigger": "gc"
        },
        {
          "content": "Array.from(${1:document}.getElementsByTagName('${2:tag}'))",
          "name": "getElementsByTagName",
          "scope": "editor",
          "syntax": "javascript",
          "trigger": "gt"
        },
        {
          "content": "${1:document}.querySelector('${2:selector}')",
          "name": "querySelector",
          "scope": "editor",
          "syntax": "javascript",
          "trigger": "qs"
        },
        {
          "content": "Array.from(${1:document}.querySelectorAll('${2:selector}'))",
          "name": "querySelectorAll",
          "scope": "editor",
          "syntax": "javascript",
          "trigger": "qsa"
        },
        {
          "content": "const $0 =  document.createElement('${1:tag}');\n$0.className= '${3:class name}';\n$0.id = 'hello1';\n$0.setAttribute('${4:attribute}', '${5:value});\nvar textNode = document.createTextNode('${6:text}');\n$0.appendChild(textNode);",
          "name": "New Element",
          "trigger": "ne"
        },
        {
          "content": "$0.addEventListener('${1:event}', ${2:function});",
          "name": "add event listener",
          "trigger": "ae"
        }
      ],
      "name": "DOM"
    },
    {
      "children": [
        {
          "content": "function (err${1:, value}) {$0}",
          "name": "Node.js style callback",
          "scope": "editor",
          "syntax": "javascript",
          "trigger": "cb"
        },
        {
          "content": "${1:express/router}.${2:request}('/', async(req, res, next) => {\n  res.send();\n});",
          "name": "express route",
          "trigger": "er"
        },
        {
          "content": "require('${1:module}');",
          "name": "require a module",
          "scope": "editor",
          "syntax": "javascript",
          "trigger": "re"
        },
        {
          "content": "exports.${1:name} = ${2:value};",
          "name": "export member",
          "scope": "editor",
          "syntax": "javascript",
          "trigger": "em"
        },
        {
          "content": "module.exports = ${1:name};",
          "name": "module.exports",
          "scope": "editor",
          "syntax": "javascript",
          "trigger": "me"
        },
        {
          "content": "${1:emitter}.on('${2:event}', (${3:arguments}) => {\n\t$0\n});",
          "name": "attach an event handler",
          "scope": "editor",
          "syntax": "javascript",
          "trigger": "on"
        },
        {
          "content": "function (req, res${1:, next}) {\n\t$0\n}",
          "name": "Express middleware",
          "scope": "editor",
          "syntax": "javascript",
          "trigger": "xm"
        },
        {
          "content": "function (err, req, res, next) {\n\t$0\n}",
          "name": "Express error handler",
          "scope": "editor",
          "syntax": "javascript",
          "trigger": "xerr"
        }
      ],
      "name": "Node"
    },
    {
      "children": [
        {
          "content": "'use strict';",
          "name": "use strict",
          "scope": "editor",
          "syntax": "javascript",
          "trigger": "us"
        }
      ],
      "name": "Miscellaneous"
    }
  ]
}
